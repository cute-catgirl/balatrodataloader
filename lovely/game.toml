[manifest]
version = "0.0.1"
priority = 0

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''function Card:set_ability(center, initial, delay_sprites)'''
position = "after"
payload = "if not center then return end"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''function Card:init(X, Y, W, H, card, center, params)'''
position = "after"
payload = "if not center then return end"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''function get_joker_win_sticker(_center, index)'''
position = "after"
payload = "if not _center then return end"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''effect = center.effect,'''
position = "after"
payload = "data_driven = center.data_driven,"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.name ~= 'Seeing Double' and self.ability.x_mult > 1 and (self.ability.type == '' or next(context.poker_hands[self.ability.type])) then'''
position = "before"
payload = '''if self.ability.data_driven then
    local seed = pseudoseed(self.ability.name or "data_driven")
    print("Seed:", seed)
    return calculate_data_driven_joker(self.ability.extra.on_play, seed)
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''self.localization = assert(loadstring(love.filesystem.read('localization/'..G.SETTINGS.language..'.lua')))()'''
position = "after"
payload = '''self.localization = add_custom_localization(self.localization)'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''banned_keys = {},'''
position = "after"
payload = '''datapacks = {},'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''self.GAME.stake = args.stake or self.GAME.stake or 1'''
position = "after"
payload = '''self.GAME.datapacks = args.datapacks or self.GAME.datapacks or {}'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''local _stake = G.forced_stake or G.PROFILES[G.SETTINGS.profile].MEMORY.stake or 1'''
position = "after"
payload = '''
local _datapacks = {}
for k, v in pairs(G.ENABLED_DATAPACKS or {}) do
    if v then table.insert(_datapacks, k) end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''G.FUNCS.start_run(e, {stake = _stake, seed = _seed, challenge = _challenge})'''
position = "at"
payload = '''G.FUNCS.start_run(e, {stake = _stake, seed = _seed, challenge = _challenge, datapacks = _datapacks})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''self.children.center = Sprite(self.T.x, self.T.y, self.T.w, self.T.h, G.ASSET_ATLAS[_center.set], self.config.center.pos)'''
position = "at"
payload = '''if _center.set == 'Joker' and _center.custom_texture and _center.custom_texture ~= "" then
    self.children.center = Sprite(self.T.x, self.T.y, self.T.w, self.T.h, _center.custom_texture, self.config.center.pos)
else
    self.children.center = Sprite(self.T.x, self.T.y, self.T.w, self.T.h, G.ASSET_ATLAS[_center.set], self.config.center.pos)
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if _type == 'Enhanced' then'''
position = "at"
payload = '''
local contains = function(table, value)
    for _, val in ipairs(G.GAME.datapacks) do
        if val == v.datapack then
            return true
        end
    end
    return false
end
if _type == 'Joker' and v.datapack ~= nil and not contains(G.GAME.datapacks or {}, v.datapack) then
    add = false
elseif _type == 'Enhanced' then'''
match_indent = true

[[patches]]
[patches.copy]
target = "game.lua"
position = "append"
sources = [
    "datapack_loader.lua",
    "add_custom_localization.lua"
]

[[patches]]
[patches.copy]
target = "card.lua"
position = "append"
sources = [
    "joker_effects.lua"
]